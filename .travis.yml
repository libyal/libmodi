language: c
env:
  global:
   # Encrypted COVERITY_SCAN_TOKEN
   - secure: "mmblqOi/PVaaOA7SzUjkyalEmy1aXPL8MtWFenPvqrx8lGjX/+I5q9NoJ3jQInx5TYb6p6yfgUg64iiyvdKMaujMmM8unimf1xQrHr2mvDHfIwlEjZ0+ISjcr8YYEmeu5Xzg5stKpowMYZhs8RSgl7q4gWCug4IPMTVMv9DHksSJyApYy0cQ+24LtSIqjZ2le+GP/UoypNVH5ASpM3Tcf9N+6zqgGyn0kGN+rTwhtvgH04bCwk4qYHiJb0wOVINKpR1OcTsHEwV7SUunoSvmzXW4lTCPjxZHlNCNnpHnfP+IplTIxoeTobjRo5sEyyPQAcJ0FkAmT3RB9ucjXqeNG9ROnjzM4brUlUKTQDALvy7Js8DXyIlvmh2XwIZwubyuSgVzSzHenB3pP6F/ZX0pT/zxbR/O97QtJxM24nmaFjqeTrp9aKnHRR+3hm2TVeElWj69J1AtAqSTIqKyqlxHKjY4yd9l9AX+bi7DkTqUak0CHx60/a9Rs2FUET8vur8SRVY/WrFjzCRjD6gDxB26Zjr8qASG1r26Oll6wRU7GTciF2gjZ0VKdneMWLu9muiCm/XdexOqCk+Nmc/3+888QfWJXYt0GYCiQXHz0jclMzbi22BcZNJyVXglgSD0k3wqopkLRQXUbeC6v7CZ0x60CPR4qG95bMc6Jf2Vnc8PPMA="
matrix:
  include:
  - name: "Coverity"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="coverity"
    compiler: clang
    os: linux
    dist: xenial
    sudo: required
    group: edge
    addons:
      coverity_scan:
        project:
          name: "libyal/libmodi"
          description: "Build submitted via Travis CI"
        notification_email: joachim.metz@gmail.com
        build_command_prepend: "./synclibs.sh && ./autogen.sh && ./configure"
        build_command: "make -j4"
        branch_pattern: master
  - name: "Linux with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-clang"
    compiler: clang
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc on PowerPC 64-bit"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc"
    compiler: gcc
    os: linux-ppc64le
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc on s390x (Docker)"
    env:
    - DOCKERHUB_REPO="s390x/ubuntu"
    - DOCKERHUB_TAG="bionic"
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="docker"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
    services:
    - docker
  - name: "Linux with gcc and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-wide-character-type"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc without optimization"
    env:
    - CONFIGURE_OPTIONS="--enable-shared=no --enable-wide-character-type"
    - CFLAGS="--coverage -O0"
    - CPPFLAGS="-DOPTIMIZATION_DISABLED"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-no-optimization"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc without OpenSSL"
    env:
    - CONFIGURE_OPTIONS="--with-openssl=no"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-no-openssl"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc with OpenSSL EVP"
    env:
    - CONFIGURE_OPTIONS="--enable-openssl-evp-cipher=yes --enable-openssl-evp-md=yes"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-openssl-evp"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc with OpenSSL non-EVP"
    env:
    - CONFIGURE_OPTIONS="--enable-openssl-evp-cipher=no --enable-openssl-evp-md=no"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-openssl"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python module"
    env:
    - CONFIGURE_OPTIONS="--enable-python"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-python"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python 2 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python2"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - PYTHON_VERSION=2
    - TARGET="linux-gcc-python2"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python 3 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python3"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - PYTHON_VERSION=3
    - TARGET="linux-gcc-python3"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python 2 module (setup.py)"
    env:
    - TARGET="linux-gcc-python-setup-py"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
    python: 2.7
  - name: "Linux with gcc and Python 3 module (setup.py)"
    env:
    - TARGET="linux-gcc-python-setup-py"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
    python: 3.4
  - name: "Linux with gcc and shared libraries"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc, shared libraries and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared-wide-character-type"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and static executables support"
    env:
    - CONFIGURE_OPTIONS="--enable-static-executables"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-static-executables"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Mac OS with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-clang"
    compiler: clang
    os: osx
    osx_image: xcode8.3
  - name: "Mac OS with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-gcc"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "Mac OS with gcc and Python module"
    env:
    - CONFIGURE_OPTIONS="--enable-python"
    - TARGET="macos-gcc-python"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "Mac OS with gcc and Python 2 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python2"
    - PYTHON_VERSION=2
    - TARGET="macos-gcc-python2"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "Mac OS with gcc and Python 2 module (setup.py)"
    env:
    - TARGET="macos-gcc-python-setup-py"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "Mac OS gcc and Python module and pkgbuild"
    env:
    - CONFIGURE_OPTIONS="--disable-dependency-tracking --prefix=/usr/local --enable-python --with-pyprefix"
    - TARGET="macos-gcc-pkgbuild"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
before_install:
- .travis/before_install.sh
install:
- .travis/install.sh
script:
- .travis/script.sh
after_success:
- if test ${TARGET} = "linux-gcc-no-optimization"; then
    curl -o codecov.sh -s https://codecov.io/bash && sed 's/ -execdir / -exec /' -i ./codecov.sh && /bin/bash ./codecov.sh -n ${TARGET} -y .codecov.yml;
  fi
