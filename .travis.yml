language: c
env:
  global:
   # Encrypted COVERITY_SCAN_TOKEN
   - secure: "mmblqOi/PVaaOA7SzUjkyalEmy1aXPL8MtWFenPvqrx8lGjX/+I5q9NoJ3jQInx5TYb6p6yfgUg64iiyvdKMaujMmM8unimf1xQrHr2mvDHfIwlEjZ0+ISjcr8YYEmeu5Xzg5stKpowMYZhs8RSgl7q4gWCug4IPMTVMv9DHksSJyApYy0cQ+24LtSIqjZ2le+GP/UoypNVH5ASpM3Tcf9N+6zqgGyn0kGN+rTwhtvgH04bCwk4qYHiJb0wOVINKpR1OcTsHEwV7SUunoSvmzXW4lTCPjxZHlNCNnpHnfP+IplTIxoeTobjRo5sEyyPQAcJ0FkAmT3RB9ucjXqeNG9ROnjzM4brUlUKTQDALvy7Js8DXyIlvmh2XwIZwubyuSgVzSzHenB3pP6F/ZX0pT/zxbR/O97QtJxM24nmaFjqeTrp9aKnHRR+3hm2TVeElWj69J1AtAqSTIqKyqlxHKjY4yd9l9AX+bi7DkTqUak0CHx60/a9Rs2FUET8vur8SRVY/WrFjzCRjD6gDxB26Zjr8qASG1r26Oll6wRU7GTciF2gjZ0VKdneMWLu9muiCm/XdexOqCk+Nmc/3+888QfWJXYt0GYCiQXHz0jclMzbi22BcZNJyVXglgSD0k3wqopkLRQXUbeC6v7CZ0x60CPR4qG95bMc6Jf2Vnc8PPMA="
matrix:
  include:
  - name: "Coverity"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="coverity"
    compiler: clang
    os: linux
    dist: xenial
    sudo: required
    group: edge
    addons:
      coverity_scan:
        project:
          name: "libyal/libmodi"
          description: "Build submitted via Travis CI"
        notification_email: joachim.metz@gmail.com
        build_command_prepend: "./synclibs.sh && ./autogen.sh && ./configure"
        build_command: "make -j4"
        branch_pattern: master
  - name: "Linux with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-clang"
    compiler: clang
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-wide-character-type"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc without optimization"
    env:
    - CONFIGURE_OPTIONS="--enable-shared=no --enable-wide-character-type"
    - CFLAGS="--coverage -O0"
    - CPPFLAGS="-DOPTIMIZATION_DISABLED"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-no-optimization"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python module"
    env:
    - CONFIGURE_OPTIONS="--enable-python"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-python"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python 2 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python2"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - PYTHON_VERSION=2
    - TARGET="linux-gcc-python2"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python 3 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python3"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - PYTHON_VERSION=3
    - TARGET="linux-gcc-python3"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and Python 2 module (setup.py)"
    env:
    - TARGET="linux-gcc-python-setup-py"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
    python: 2.7
  - name: "Linux with gcc and Python 3 module (setup.py)"
    env:
    - TARGET="linux-gcc-python-setup-py"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
    python: 3.4
  - name: "Linux with gcc and shared libraries"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc, shared libraries and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared-wide-character-type"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "Linux with gcc and static executables support"
    env:
    - CONFIGURE_OPTIONS="--enable-static-executables"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-static-executables"
    compiler: gcc
    os: linux
    dist: xenial
    sudo: required
    group: edge
  - name: "MacOS with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-clang"
    compiler: clang
    os: osx
    osx_image: xcode8.3
  - name: "MacOS with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-gcc"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "MacOS with gcc and Python module"
    env:
    - CONFIGURE_OPTIONS="--enable-python"
    - TARGET="macos-gcc-python"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "MacOS with gcc and Python 2 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python2"
    - PYTHON_VERSION=2
    - TARGET="macos-gcc-python2"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "MacOS with gcc and Python 2 module (setup.py)"
    env:
    - TARGET="macos-gcc-python-setup-py"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
  - name: "MacOS gcc and pkgbuild"
    env:
    - CONFIGURE_OPTIONS="--disable-dependency-tracking --prefix=/usr/local --enable-python --with-pyprefix"
    - TARGET="macos-gcc-pkgbuild"
    compiler: gcc
    os: osx
    osx_image: xcode8.3
before_install:
  - if test ${TRAVIS_OS_NAME} = "linux"; then
      sudo apt-get update && sudo apt-get --fix-missing -o Dpkg::Options::="--force-confold" upgrade -y --allow-unauthenticated && sudo apt-get install -y autopoint libfuse-dev;
    elif test ${TRAVIS_OS_NAME} = "osx"; then
      brew update && brew install gettext gnu-sed && brew link --force gettext;
    fi
  - if test ${TARGET} = "coverity"; then
      echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-;
    fi
install:
  - if test ${TRAVIS_OS_NAME} = "osx"; then
      export SED="/usr/local/bin/gsed";
    fi
  - ./synclibs.sh --use-head && ./autogen.sh
  - if test ${TARGET} = "linux-gcc-shared" || test ${TARGET} = "linux-gcc-shared-wide-character-type"; then
      ./configure > /dev/null && make > /dev/null && ./syncsharedlibs.sh --use-head;
    fi
  - if test -x "synctestdata.sh"; then
      ./synctestdata.sh;
    fi
script:
  - if test ${TRAVIS_OS_NAME} = "linux"; then
      export PATH=$(echo $PATH | tr ":" "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s/::/:/g");
    fi
  - if test ${TARGET} = "linux-gcc-python-setup-py" || test ${TARGET} = "macos-gcc-python-setup-py"; then
      python ./setup.py build;
    elif test ${TARGET} != "coverity"; then
      ./configure ${CONFIGURE_OPTIONS} && make > /dev/null && make check CHECK_WITH_STDERR=1;
      if test $? -ne 0 && test -f tests/test-suite.log; then
        cat tests/test-suite.log;
      fi;
      if test ${TARGET} = "macos-gcc-pkgbuild"; then
        VERSION=`sed '5!d; s/^ \[//;s/\],$//' configure.ac` &&
        make install DESTDIR=${PWD}/osx-pkg &&
        mkdir -p ${PWD}/osx-pkg/usr/share/doc/libmodi &&
        cp AUTHORS COPYING NEWS README ${PWD}/osx-pkg/usr/share/doc/libmodi &&
        pkgbuild --root osx-pkg --identifier com.github.libyal.libmodi --version ${VERSION} --ownership recommended ../libmodi-${VERSION}.pkg;
      fi
    fi
after_success:
  - if test ${TARGET} = "linux-gcc-no-optimization"; then
      curl -o codecov.sh -s https://codecov.io/bash && /bin/bash ./codecov.sh -n ${TARGET} -y .codecov.yml;
    fi
